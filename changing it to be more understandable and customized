import pygame
import random
import time

# Initializing pygame
pygame.init()

# Defining colors
White = (255, 255, 255)
Black = (0, 0, 0)
Red = (255, 0, 0)
Green = (0, 255, 0)
Yellow = (255, 255, 0)

# Setting display dimensions
Width, Height = 600, 400
Cell_size = 20

# Setting game speed
Base_Fps = 10
Fps = Base_Fps

# Defining powerup types
Powerup_names = {
    1: "Color Change",
    2: "Length Multiply",
    3: "Speed Up"
}

# Defining snake directions
UP = 0
DOWN = 1
LEFT = 2
RIGHT = 3

# Initializing screen
screen = pygame.display.set_mode((Width, Height))
pygame.display.set_caption("Ultimate Snake Game Project")

clock = pygame.time.Clock()

# Function to generate random positions for powerups and food
def generate_random_position():
    x = random.randrange(0, Width - Cell_size, Cell_size)
    y = random.randrange(0, Height - Cell_size, Cell_size)
    return x, y

# Function to draw snake
def draw_snake(snake, color):
    for pos in snake:
        pygame.draw.rect(screen, color, (pos[0], pos[1], Cell_size, Cell_size))

# Function to draw powerup
def draw_powerup(powerup):
    pygame.draw.rect(screen, Yellow, (powerup[0], powerup[1], Cell_size, Cell_size))

# Function to generate random powerup
def generate_random_powerup():
    powerup_type = random.choice(list(Powerup_names.keys()))
    powerup_pos = generate_random_position()
    return powerup_type, powerup_pos

# Function to handle power-up effects
def apply_powerup(snake, powerup_type, snake_color, snake_speed):
    global Fps
    if powerup_type == 1:  # Color Change
        snake_color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
    elif powerup_type == 2:  # Length Multiply
        snake.extend([snake[-1]] * 3)
    elif powerup_type == 3:  # Speed Up
        Fps += 2  # Increase FPS
    return snake, snake_color, snake_speed

# Function to display game over screen
def game_over_screen(score):
    screen.fill(Black)
    font = pygame.font.Font(None, 36)
    text = font.render(f"Game Over! Score: {score}", True, White)
    text_rect = text.get_rect(center=(Width // 2, Height // 2))
    screen.blit(text, text_rect)
    pygame.display.flip()
    time.sleep(2)  # Display game over screen for 2 seconds before quitting
    pygame.quit()

# Main function for the game
def main():
    global Fps
    snake = [(Width // 2, Height // 2)]
    snake_direction = RIGHT
    snake_speed = Cell_size
    snake_color = Green

    food_pos = generate_random_position()
    powerup_type, powerup_pos = generate_random_powerup()
    powerup_active = True  # Power-up is initially active
    powerup_end_time = 0  # Initialize power-up end time

    font = pygame.font.Font(None, 36)  # Font for displaying score
    powerup_font = pygame.font.Font(None, 24)  # Font for displaying power-up name

    score = 0  # Initialize score
    snake_length = 1  # Initialize snake length
    
    running = True
    while running:
        screen.fill(Black)

        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and snake_direction != DOWN:
                    snake_direction = UP
                elif event.key == pygame.K_DOWN and snake_direction != UP:
                    snake_direction = DOWN
                elif event.key == pygame.K_LEFT and snake_direction != RIGHT:
                    snake_direction = LEFT
                elif event.key == pygame.K_RIGHT and snake_direction != LEFT:
                    snake_direction = RIGHT

        # Move snake
        head = snake[0]
        x, y = head
        if snake_direction == UP:
            y -= snake_speed
        elif snake_direction == DOWN:
            y += snake_speed
        elif snake_direction == LEFT:
            x -= snake_speed
        elif snake_direction == RIGHT:
            x += snake_speed

        # Check for collision with powerup
        if head == powerup_pos:
            powerup_active = False
            powerup_type, powerup_pos = generate_random_powerup()
            powerup_name = Powerup_names.get(powerup_type, "Unknown Power-up")
            powerup_text = powerup_font.render(f"Power-up: {powerup_name}", True, White)
            powerup_end_time = time.time() + 5
            snake, snake_color, snake_speed = apply_powerup(snake, powerup_type, snake_color, snake_speed)
            # Ensure a new power-up appears after consuming the previous one
            powerup_active = True
            # Increase score when power-up is consumed
            #score += 10

        # Check for collision with food
        if head == food_pos:
            snake.append(snake[-1])
            food_pos = generate_random_position()
            # Increase score when food is eaten
            score += 1
            snake_length += 1

        # Check for collision with walls
        if x >= Width:
            x = 0
        elif x < 0:
            x = Width - Cell_size
        elif y >= Height:
            y = 0
        elif y < 0:
            y = Height - Cell_size

        # Check for collision with itself
        if (x, y) in snake[1:]:
            # Call game over screen with the final score
            game_over_screen(score)

        # Update snake length
        snake = [(x, y)] + snake[:snake_length - 1]

        # Drawing food
        pygame.draw.rect(screen, Red, (food_pos[0], food_pos[1], Cell_size, Cell_size))

        # Drawing powerup
        if powerup_active:
            draw_powerup(powerup_pos)

        # Drawing snake
        draw_snake(snake, snake_color)

        # Drawing power-up text
        if powerup_active and time.time() < powerup_end_time:
            screen.blit(powerup_text, (10, 10))
        
        # Display score on screen
        score_text = font.render(f"Score: {score}", True, White)
        screen.blit(score_text, (10, Height - 30))
       # length_text = font.render(f"Snake Length: {snake_length}", True, White)
       # screen.blit(length_text, (10, Height - 60))

        pygame.display.flip()
        clock.tick(Fps)

    pygame.quit()

if __name__ == "__main__":
    main()

